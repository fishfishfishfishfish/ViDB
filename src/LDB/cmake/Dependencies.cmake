SET(LEDGER_INCLUDE_DIRS "")
SET(LEDGER_LINKER_LIBS "")
SET(LEDGER_DEFINITIONS "")

set(CMAKE_PREFIX_PATH "/media/nvme/cxy_test/protobuf")
FIND_PACKAGE(Protobuf REQUIRED)
# 添加调试信息输出
message(STATUS "Protobuf 版本: ${Protobuf_VERSION}")
message(STATUS "Protobuf 包含路径: ${Protobuf_INCLUDE_DIRS}")
message(STATUS "Protobuf 库路径: ${Protobuf_LIBRARIES}")
message(STATUS "Protobuf 编译器路径: ${Protobuf_PROTOC_EXECUTABLE}")

FIND_PACKAGE(LibEvent REQUIRED)
LIST(APPEND DIST_INCLUDE_DIRS ${LIBEVENT_INCLUDE_DIRS})
LIST(APPEND DIST_LINKER_LIBS ${LIBEVENT_LIBRARIES})

FIND_PACKAGE(Boost REQUIRED COMPONENTS ${BOOST_COMPONENT})
IF(Boost_FOUND)
    LIST(APPEND LEDGER_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
    LIST(APPEND LEDGER_LINKER_LIBS ${Boost_LIBRARIES})
ENDIF()

FIND_PACKAGE(Rocksdb REQUIRED)
IF(ROCKSDB_FOUND)
  LIST(APPEND LEDGER_INCLUDE_DIRS ${ROCKSDB_INCLUDES})
  LIST(APPEND LEDGER_LINKER_LIBS ${ROCKSDB_LIBRARIES})
  ADD_DEFINITIONS(-DUSE_ROCKSDB)
ENDIF()

FIND_PACKAGE(CryptoPP REQUIRED)
IF(CRYPTOPP_FOUND)
  LIST(APPEND LEDGER_INCLUDE_DIRS ${CRYPTOPP_INCLUDE_DIR})
  LIST(APPEND LEDGER_LINKER_LIBS ${CRYPTOPP_LIBRARIES})
ENDIF()

# Add TBB support
FIND_PACKAGE(TBB REQUIRED)
IF(TBB_FOUND)
  LIST(APPEND LEDGER_INCLUDE_DIRS ${TBB_INCLUDE_DIRS})
  LIST(APPEND LEDGER_LINKER_LIBS ${TBB_LIBRARIES})
ENDIF()
message( STATUS "TBB_FOUND = ${TBB_FOUND}" )
message( STATUS "TBB_VERSION = ${TBB_VERSION}" )
message( STATUS "TBB_VERSION_MAJOR = ${TBB_VERSION_MAJOR}" )
message( STATUS "TBB_VERSION_MINOR = ${TBB_VERSION_MINOR}" )


INCLUDE_DIRECTORIES(SYSTEM ${LEDGER_INCLUDE_DIRS})
# MESSAGE(STATUS "INCLUDE ${LEDGER_INCLUDE_DIRS}")
