#!/usr/bin/env python3
"""
This script extracts summary statistics from results.json file generated by the speed benchmark to the format expected by the benchmark-action/github-action-benchmark action.

Example input:
{
  "complete": true,
  "success": true,
  "elapsed_s": 36.648604042,
  "summary": {
    "entries_in_db": 4000000.0,
    "block_population.throughput_per_sec": 2.8824396997289927,
    "updates.throughput_per_sec": 161451.43770458878,
    "elapsed_s": 36.648604042,
    "reads.latency_s": 1.47e-7,
    "transactions.throughput_per_sec": 11144.019815192332,
    "deletes.throughput_per_sec": 153907.42569461648,
    "reads.throughput_per_sec": 176353.56597381394,
    "inserts.throughput_per_sec": 164619.15867548273
  },
  ...
}

Example output:
[
    {
        "name": "Updates Throughput",
        "unit": "ops/s",
        "value": 161451.43770458878
    },
    {
        "name": "Reads Throughput",
        "unit": "ops/s",
        "value": 176353.56597381394
    },
    ...
    {
        "name": "Read Latency",
        "unit": "ns",
        "value": 147
    },
]
"""

import sys
import json


def extract_summary_statistics(results):
    summary = results.get("summary", {})
    output = []

    # Map the keys in the summary to the desired output format
    key_mapping = {}
    for key in summary.keys():
        if key.endswith(".throughput_per_sec"):
            name = key.replace(".throughput_per_sec", "").replace(
                "_", " ").title() + " Throughput"
            unit = "ops/s"
        elif key.endswith(".latency_s"):
            name = key.replace(".latency_s", "").replace(
                "_", " ").title() + " Latency"
            unit = "ns"
        else:
            continue
        key_mapping[key] = (name, unit)
    for key, (name, unit) in key_mapping.items():
        if key in summary:
            value = summary[key]
            # Convert latency from seconds to nanoseconds
            if key.endswith(".latency_s"):
                value *= 1e9
            output.append({
                "name": name,
                "unit": unit,
                "value": value
            })

    return output


def main(input_file, output_file):
    with open(input_file, 'r') as f:
        results = json.load(f)

    formatted_results = extract_summary_statistics(results)

    with open(output_file, 'w') as f:
        json.dump(formatted_results, f, indent=4)


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"You provided {len(sys.argv)} arguments, but 3 are required")
        print("Usage: python results2benchmark.py <input_file> <output_file>")
        sys.exit(1)

    input_file = sys.argv[1]
    output_file = sys.argv[2]
    main(input_file, output_file)
